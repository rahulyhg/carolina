(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{166:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugins","aria-hidden":"true"}},[t._v("#")]),t._v(" Plugins")]),s("p",[t._v("Plugins are good ways to group functionality together. They can add\nfunctionality to the framework itself, provide templates, routes, or\nour public assets, and define Services. There are some plugins that are\nofficial, including some which are installed by default. They are covered\nin another section.")]),s("p",[t._v("This section covers the generic basics of installing plugins as well as\ninformation about when and how to write your own plugins.")]),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#installing-plugins"}},[t._v("Installing Plugins")])]),s("li",[s("a",{attrs:{href:"#writing-plugins"}},[t._v("Writing Plugins")]),s("ul",[s("li",[s("a",{attrs:{href:"#plugin-index-file"}},[t._v("Plugin Index File")])]),s("li",[s("a",{attrs:{href:"#services"}},[t._v("Services")])]),s("li",[s("a",{attrs:{href:"#other-resources"}},[t._v("Other Resources")])])])])])]),s("p"),s("h2",{attrs:{id:"installing-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-plugins","aria-hidden":"true"}},[t._v("#")]),t._v(" Installing Plugins")]),s("p",[t._v('A few plugins are automatically installed and configured in the starter\nproject. They are listed by "require" path in the '),s("code",[t._v("plugins")]),t._v(" property in\n"),s("code",[t._v("config/app.js")]),t._v(".")]),s("p",[t._v("These are the steps to take for installed additional plugins\n(but plugins should define specific guidance):")]),s("p",[s("strong",[t._v("Step 1: List in "),s("code",[t._v("config/app.js")])])]),s("p",[t._v("To install a plugin, list it under the array "),s("code",[t._v("plugins")]),t._v(" in "),s("code",[t._v("config/app.js")]),t._v(".\nList a plugin by the import path to a file that exports the plugin info,\nwhich each plugin should document. It should either be to a module in\n"),s("code",[t._v("node_modules")]),t._v(" or a relative path from the root of your project\ndirectory.")]),s("p",[s("strong",[t._v("Step 2: Import Files")])]),s("p",[t._v("Some plugins define files to be copied into your project directory (such as\na config file, static assets, templates, etc). Once you have listed a new\nplugin in your "),s("code",[t._v("config/app.js")]),t._v(" file, you should copy any files it has.")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("node . import-plugin-resources -p PLUGIN -crstf\n")])])]),s("p",[t._v("This will copy the files over. Before running this, you should consult the\nplugin's documentation to see what files will be copied. Any existing files\nwill be overwritten.")]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("p",[t._v("Once a plugin is installed, if it is updated you can use the above command\nto import any changes to those copied files. However, the you may not want to\noverwrite the config file. To copy over file except for the plugin config file,\nrun "),s("code",[t._v("node . import-plugin-resources -p PLUGIN -rstf")]),t._v(".")])]),s("p",[s("strong",[t._v("Step 3: Register Service(s)")])]),s("p",[t._v("Some plugins define Services that can be added to the Carolina global object,\nand sometimes this may be required for the plugin to work.\nAdd any such Services to the "),s("code",[t._v("services")]),t._v(" object in "),s("code",[t._v("config/app.js")]),t._v(" as instructed\nin the plugin documentation.")]),s("p",[s("strong",[t._v("Step 4: Mount Plugin Router")])]),s("p",[t._v("Some plugins export a router, which you can add to your site's routing\nconfiguration. For example, an admin plugin might be mountable at any\nprefix, but preferably at "),s("code",[t._v("/admin")]),t._v(" or something like that.\nConsult the plugin documentation.")]),s("h2",{attrs:{id:"writing-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writing-plugins","aria-hidden":"true"}},[t._v("#")]),t._v(" Writing Plugins")]),s("p",[t._v('A plugin is a group of code that interacts with the Carolina framework and\nmay provide additional service objects (like Models, Middleware, or Event\nclasses), a new Service, extra templates, public assets, and/or\n"mountable" sub-routers. It is best if a plugin could easily be added to\nany Carolina project. An example of a plugin might be the entirety of all files\nrelated to the blog section of a site, or a supplemental library of objects\nfor use by Carolina services (such as a File Driver for Google Drive, a\nMailer class for GMail, and maybe a logger that adds notes to Google Keep).')]),s("p",[s("strong",[t._v("Some Considerations")])]),s("p",[t._v('Your plugin may contain Services or Service objects/classes that will be\nreferenced by the Carolina framework by name. It is important to avoid name\ncollisions, especially if you are writing a plugin for use in multiple projects.\nIt is recommended that you use the NPM name of the package containing\nthe plugin as a baseline. For example, if your plugin\'s NPM name was\n"MyPluginName", a custom User Model might be named "MyPluginName/User".\nThere is nothing wrong with using slashes like this and that is encouraged\nfor re-useable plugins. If you are exposing only one service, you could\nname it "MyPluginName". If you are exposing multiple services, you should\nname it something like "MyPluginName/Service1".')]),s("p",[t._v("The structure of a plugin is like this:")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("plugin_dir/\n  config/                 # directory for config file\n    my_plugin_name.js     # config file for plugin, to be copied into project\n  plugin/                 # mimics the site directory of the carolina project\n  services/               # place for services\n    my-custom-service.js  # a service\n  src/                    # source files, to be copied into project\n  templates/              # templates, to be copied into project\n  index.js                # plugin details, required\n  router.js               # a router file\n")])])]),s("h3",{attrs:{id:"plugin-index-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugin-index-file","aria-hidden":"true"}},[t._v("#")]),t._v(" Plugin Index File")]),s("p",[t._v("The main "),s("code",[t._v("index.js")]),t._v(" of the plugin should look like this:")]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// user friendly name of plugin")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pluginName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My Plugin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// plugin root")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pluginPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" __dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// types of files exported by app")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exportConfigFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exportPrivateFiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exportSrcFiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exportStaticFiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exportTemplates "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Where files are copied into projects\n */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name of output config file (relative to config/)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outputConfigFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugin_name.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// required export name of output config")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outputConfigExportName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin_name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of output private files (relative to storage/)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outputPrivateFilesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugin_name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of output src files (relative to src/)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outputSrcFilesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugin_name/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of output static files (relative to public/)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outputStaticFilesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'static/plugin_name/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of output templates (relative to templates)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outputTemplatesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugin_name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Where files are in the plugin directory that are to be copied out\n */")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of config file to copy over")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localConfigFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugin_name.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of private files to copy over")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localPrivateFilesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'private'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of static files to copy over")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localSrcFilesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of static files to copy over")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localStaticFilesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'static'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plugin-name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// location of templates to copy over")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localTemplatesDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'templates'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// required services under required name and import path")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requiredServices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MyPluginName/MyCustomService'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'package_root/services/my-custom-service'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#services","aria-hidden":"true"}},[t._v("#")]),t._v(" Services")]),s("p",[t._v("A plugin can expose any number of Services if you want it to. It is recommended\nto expose only one Serivce if possible.")]),s("p",[t._v("Here is an example:")]),s("p",[t._v("Define a service in "),s("code",[t._v("<plugin_root>/services/my-custom-service.js")]),t._v(":")]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* global Carolina */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// extends BaseService")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BaseService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'carolina/services/base-service'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * MyCustomService\n * Does stuff.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call super constructor with Service Name")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyPluginName/MyCustomService"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// define custom methods here")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onShutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// put things to do upon application shutdown here")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nexports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyCustomService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In your documentation, you should tell your users how they need to reference\nthis service in the "),s("code",[t._v("services")]),t._v(" object of "),s("code",[t._v("config/app.js")]),t._v(".")]),s("p",[t._v("If you were exposing this Service, the "),s("code",[t._v("services")]),t._v(" object should contain a line\nlike this:")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  'MyPluginName/MyCustomService': 'my-plugin-name/services/my-custom--service'\n")])])]),s("p",[t._v("This would allow an application that uses your plugin to do this anywhere\nin their code:")]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" MyCustomService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Carolina"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MyPluginName/MyCustomService'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyCustomService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3")]),t._v("\n")])])]),s("h3",{attrs:{id:"other-resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-resources","aria-hidden":"true"}},[t._v("#")]),t._v(" Other Resources")]),s("p",[t._v("Aside from Services, there are two types of things that might be in a plugin:")]),s("ul",[s("li",[t._v("Files that will be copied into the project directory somewhere.")]),s("li",[t._v("Services objects/classes, such as those defined in the projects "),s("code",[t._v("site/")]),t._v(" directory.")])]),s("h4",{attrs:{id:"configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration","aria-hidden":"true"}},[t._v("#")]),t._v(" Configuration")]),s("p",[t._v("Your plugin can and probably should specify 1 configuration file, which will\nbe copied into the "),s("code",[t._v("config/")]),t._v(" directory of a project that uses the plugin. It\nshould be named the same or something similar to the plugin NPM name. It can\nbe helpful to use underscores instead of dashes if you want.")]),s("p",[t._v("If your plugin is providing a config file, in the "),s("code",[t._v("index.js")]),t._v(" of the plugin\nyou should define "),s("code",[t._v("exportConfigFile")]),t._v(" as "),s("code",[t._v("true")]),t._v(", "),s("code",[t._v("outputConfigFile")]),t._v(" as\nthe name of the file to create (ie, "),s("code",[t._v('"my_plugin_name.js"')]),t._v("),\n"),s("code",[t._v("outputConfigExportName")]),t._v(" as the name by which the file should be exported by\na project's "),s("code",[t._v("config/index.js")]),t._v(" file (ie, "),s("code",[t._v("'my_plugin_name'")]),t._v("), and\n"),s("code",[t._v("localConfigFile")]),t._v(" as the full path the configuration file in the plugin.")]),s("p",[t._v("A configuration file should expose an object and a user of your plugin can\nedit. It is the main way to provide options to plugin users for controlling\nthe behavior of the plugin.")]),s("p",[t._v("Once a user has installed the plugin and imported its resources using the\n"),s("code",[t._v("import-plugin-resources")]),t._v(" command, they will need to expose it from\n"),s("code",[t._v("config/index.js")]),t._v(". The output of the "),s("code",[t._v("import-plugin-resources")]),t._v(" command\nwill indicate this, instructing them to export the config file based on its\nname. If you config file is called "),s("code",[t._v("my_plugin_name.js")]),t._v(", it should\nbe exported like this in "),s("code",[t._v("config/index.js")]),t._v(":")]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("  my_plugin_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./my_plugin_name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("This means that anywhere in your plugin or an application using it, a\nconfig value from the object exported by the config file can be accessed\nlike this:")]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someConfigValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Carolina"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_plugin_name.some_attr'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'defaultValue'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In your plugin files, you should always provide a sane default when accessing\nconfiguration values in case a\nuser neglects to provide a custom value.")]),s("p",[t._v("The configuration file is copied from a plugin to a site with the command:\n"),s("code",[t._v("node . import-plugin-resources -p PLUGIN -c")]),t._v(".")]),s("h4",{attrs:{id:"router"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#router","aria-hidden":"true"}},[t._v("#")]),t._v(" Router")]),s("p",[t._v("You could provide a router file that exports a list of route objects\n(exactly as you would have in "),s("code",[t._v("site/http/routes/")]),t._v("). If you do define a router\n(recommended as "),s("code",[t._v("plugin_dir/router.js")]),t._v("), you should document considerations\nfor mounting it. You should try to write everything such that a site could mount\nit anywhere.")]),s("p",[t._v("The starter project mounts the router of the Admin plugin this way\n(in "),s("code",[t._v("site/http/routes/browser.js")]),t._v("):")]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" route"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/admin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'carolina/plugins/admin/router'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),s("p",[t._v("Since the admin router defines a route at '/', it will be accessed in the main\nsite at "),s("code",[t._v("/admin/")]),t._v(".")]),s("h4",{attrs:{id:"service-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-objects","aria-hidden":"true"}},[t._v("#")]),t._v(" Service Objects")]),s("p",[t._v("Many Carolina Services look for certain class definitions in a projects "),s("code",[t._v("site/")]),t._v("\ndirectory, but they will also check the "),s("code",[t._v("plugin/")]),t._v(" directory of all installed\nplugins.")]),s("p",[t._v("For example, the DB Service will check for Model classes\nin "),s("code",[t._v("site/db/models/index.js")]),t._v("\n(or "),s("code",[t._v("site/db/model.js")]),t._v("), and it will also check in\n"),s("code",[t._v("<plugin_dir>/db/models/index.js")]),t._v(" (or "),s("code",[t._v("<plugin_dir>/db/model.js")]),t._v("). This happens\nautomatically, and all you have to do is define those objects and export them\njust as you would in the "),s("code",[t._v("site/")]),t._v(" directory.")]),s("h4",{attrs:{id:"template-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#template-files","aria-hidden":"true"}},[t._v("#")]),t._v(" Template Files")]),s("p",[t._v("Your plugin may need to define templates, either for use by plugin Controllers\nor simply as a feature of your plugin.\nThese templates will need to be copied into the application's "),s("code",[t._v("templates/")]),t._v("\ndirectory. You will want to avoid name conflict in the "),s("code",[t._v("templates/")]),t._v(" directory\nso you should have your templates be copied into\n"),s("code",[t._v("templates/<vendor_name>/<plugin_name>/")]),t._v(".\nYou should define "),s("code",[t._v(".pug")]),t._v(" and other\ntemplates (such as nunjucks templates for e-mails) in "),s("code",[t._v("<plugin_dir>/templates/")]),t._v(".")]),s("p",[t._v("To have a plugin set up for exporting templates, in your plugin's "),s("code",[t._v("index.js")]),t._v("\nfile, set "),s("code",[t._v("exportTemplates")]),t._v(" to "),s("code",[t._v("true")]),t._v(", "),s("code",[t._v("outputTemplatesDir")]),t._v(" to the name\nof the directory relative to a projects "),s("code",[t._v("templates/")]),t._v(" dir that you want your\ntemplates to be copied into, and "),s("code",[t._v("localTemplatesDir")]),t._v(" to the full path of\nthe directory where templates to be copied over reside.")]),s("p",[t._v("Template files are copied from a plugin to a project with the command:\n"),s("code",[t._v("node . import-plugin-resources -p PLUGIN -t")]),t._v(".")]),s("h4",{attrs:{id:"public-or-private-assets-and-frontend-source-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-or-private-assets-and-frontend-source-files","aria-hidden":"true"}},[t._v("#")]),t._v(" Public or Private Assets and Frontend Source Files")]),s("p",[t._v("Your plugin may need to have public assets and frontend source files copied over\ninto a projects "),s("code",[t._v("public/")]),t._v(" directory and "),s("code",[t._v("src/")]),t._v(" directory. Follow the same\npractices as above for templates.")]),s("p",[t._v('Public assets ("static files") are copied from a plugin to a project with the\ncommand:\n'),s("code",[t._v("node . import-plugin-resources -p PLUGIN -s")]),t._v(".")]),s("p",[t._v("Private files are copied from a plugin to a project's "),s("code",[t._v("storage/")]),t._v(" dir with the\ncommand:\n"),s("code",[t._v("node . import-plugin-resources -p PLUGIN -f")]),t._v(".")]),s("p",[t._v("Source files are copied from a plugin to a project's "),s("code",[t._v("src/")]),t._v(" dir with the\ncommand:\n"),s("code",[t._v("node . import-plugin-resources -p PLUGIN -r")]),t._v(".")]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("p",[t._v("If you use the template "),s("code",[t._v("index.js")]),t._v(" above, you do not need to worry about local\nprivate files not existing if you dont need to export them. Simply set the\nexport boolean values to "),s("code",[t._v("false")]),t._v(" for any type of file that your plugin\ndoes not export.")])])])}],!1,null,null,null);e.default=n.exports}}]);