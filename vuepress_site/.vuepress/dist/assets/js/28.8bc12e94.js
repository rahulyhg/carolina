(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{158:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"fixtures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fixtures","aria-hidden":"true"}},[e._v("#")]),e._v(" Fixtures")]),a("p",[e._v("The Database Service can reference "),a("code",[e._v(".yml")]),e._v(' files defining objects to be loaded\ninto the database. These files are known as Fixtures. Like the class libraries\nthat many Carolina Services maintain, they are assigned a name and referenced\nthat way. The Fixture named "Main" is defined in the starter project in\n'),a("code",[e._v("site/db/fixtures/main.yml")]),e._v(" and its path is exported by\n"),a("code",[e._v("site/db/fixtures/index.js")]),e._v(".")]),a("p",[e._v("Fixtures define groups of objects that can be loaded into the database. They\ncan be tracked so that they are not added multiple times, and can be\nremoved when a Fixture is undone.")]),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#writing-fixtures"}},[e._v("Writing Fixtures")]),a("ul",[a("li",[a("a",{attrs:{href:"#including-other-fixtures"}},[e._v("Including Other Fixtures")])]),a("li",[a("a",{attrs:{href:"#ref"}},[e._v("ref")])])])]),a("li",[a("a",{attrs:{href:"#executing-fixtures"}},[e._v("Executing Fixtures")])])])]),a("p"),a("h2",{attrs:{id:"writing-fixtures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-fixtures","aria-hidden":"true"}},[e._v("#")]),e._v(" Writing Fixtures")]),a("p",[e._v("Your Fixtures should go in the "),a("code",[e._v("site/db/fixtures/")]),e._v(" directory. Each should be\na YAML file with "),a("code",[e._v(".yml")]),e._v(" extension. The existing files there can serve as\nexamples, but this section will cover some of the concepts.")]),a("p",[e._v("The Fixture file can have the following properties:")]),a("ul",[a("li",[a("code",[e._v("exec")]),e._v(": A list of groups of objects, defined in the same file, that should be added to the database in order.")]),a("li",[a("code",[e._v("groups")]),e._v(": A set of groups, each which lists objects that should be added to the database in order.")]),a("li",[a("code",[e._v("require")]),e._v(": A list of Fixture names, referencing other Fixtures that should be loaded first.")])]),a("p",[e._v("Note that since "),a("code",[e._v("exec")]),e._v(" references groups by name, if the "),a("code",[e._v("exec")]),e._v(" property exists\nthen the "),a("code",[e._v("groups")]),e._v(" property must exist and have the specified groups present.\nHere is a basic example:")]),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("groups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("group1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("model")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MyCustomModel\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" group1object1\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("fields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("field1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" value1\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("field2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" value2\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("group2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("model")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MyCustomModel\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" group2object1\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("fields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("field1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" value1\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("field2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" value2\n        \n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" group1\n")])])]),a("p",[e._v("In the above example, the object listed in "),a("code",[e._v("group1")]),e._v(" would be created and added\nto the database. The object belonging to "),a("code",[e._v("group2")]),e._v(" would NOT be loaded, since\nthe group is not specified in "),a("code",[e._v("exec")]),e._v(". This feature allows you to develop\nfixtures without having them be executed until you add the group name to\nthe "),a("code",[e._v("exec")]),e._v(" property.")]),a("p",[e._v("Once a group is loaded, the DB Service tracks that the group was loaded and\nwill not the load the group again (unless unloaded).")]),a("h3",{attrs:{id:"including-other-fixtures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#including-other-fixtures","aria-hidden":"true"}},[e._v("#")]),e._v(" Including Other Fixtures")]),a("p",[e._v("Each Fixture file should be referenced by a name in "),a("code",[e._v("site/db/fixtures/index.js")]),e._v(",\nwhich should export an object mapping names to full file paths to Fixture files.\nLike some of the class types associated with Carolina Services (ie Controllers,\nModels, etc), avoid name collisions.")]),a("p",[e._v("From within a certain fixture, you can reference another fixture that must\nbe loaded before the current one. You don't need to have anything else in\na fixture. You could use a fixture with only a "),a("code",[e._v("require")]),e._v(' property to list\nother fixtures you want loaded. The fixture "Main", defined in\n'),a("code",[e._v("site/db/fixtures/main.yml")]),e._v(' is an example. When you run the fixture "Main",\nthe other fixtures reference will be checked and loaded.')]),a("h3",{attrs:{id:"ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref","aria-hidden":"true"}},[e._v("#")]),a("code",[e._v("ref")])]),a("p",[e._v("The "),a("code",[e._v("ref")]),e._v(" property on specific objects in a Fixture is optional, but it is\nvery helpful for allowing Fixtures to be removed.\nThe "),a("code",[e._v("ref")]),e._v(" name should be unique\nwithin the group. When a Fixture is unloaded, anything that had a "),a("code",[e._v("ref")]),e._v(" property\nwill be deleted. Objects that are not given")]),a("h2",{attrs:{id:"executing-fixtures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executing-fixtures","aria-hidden":"true"}},[e._v("#")]),e._v(" Executing Fixtures")]),a("p",[e._v("A good idea for using Fixtures is to list a bunch of standard fixtures\nin the "),a("code",[e._v("require")]),e._v(' property of the Fixture "Main", and then load those Fixtures\nsimply by loading "Main".')]),a("p",[e._v("To load a Fixture using the CLI:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node . load-data Main\n")])])]),a("p",[e._v("If you want to remove all the data from a Fixture, you can unload it like this:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node . load-data --unload Main\n")])])]),a("p",[e._v("This means you could remove all data (as long as "),a("code",[e._v("ref")]),e._v(" properties are used)\nand re-seed the data base like this:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node . load-data --unload Main\nnode . load-data Main\n")])])])])}],!1,null,null,null);t.default=n.exports}}]);