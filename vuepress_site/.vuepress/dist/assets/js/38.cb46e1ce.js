(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{157:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"the-carolina-global-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-carolina-global-object","aria-hidden":"true"}},[t._v("#")]),t._v(" The Carolina Global Object")]),a("p",[t._v("The Carolina global object is made global so that you can access configuration\nvalues and Services at runtime.")]),a("p",[t._v("Suppose you are writing a Controller and need access to the User Model. Like\nall Models classes, the User class is part of a library of Model classes\nmaintained by the DB Service.")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BaseController "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'carolina/main/http/controllers/base-controller'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCustomController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" userId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get DB Service")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" DBSvc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Carolina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DB'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get User model class")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" User "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DBSvc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_modelClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'User'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" userObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" _id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" userId "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more stuff")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Here, we used the Carolina global object to get a reference to the singleton\nDB Service, and then used that service to get a reference to the User class.")]),a("p",[t._v("All Services are singletons and available via the "),a("code",[t._v("$")]),t._v(" method of the\nCarolina global object as long as they are properly registered.")]),a("h2",{attrs:{id:"service-registration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-registration","aria-hidden":"true"}},[t._v("#")]),t._v(" Service Registration")]),a("p",[a("strong",[t._v("Registration In "),a("code",[t._v("config/app.js")])])]),a("p",[t._v("If you look at the file "),a("code",[t._v("config/app.js")]),t._v(", you will notice that the app\nconfiguration object has the "),a("code",[t._v("services")]),t._v(" property. It maps names of Services\nto the require paths of classes (all of which extend "),a("code",[t._v("BaseService")]),t._v("). Most\nof the ones listed in the starter project are built-in services.")]),a("p",[t._v("Because the framework relies on the built-in servies having the\nproper API, you should leave most of these alone, except for in the case of\nDB Service or Session Service - for which you have a few options for which\nclass you want to use for those Services (more on this topic in a later\nsection). Because of how this is structured, you could also subclass any\nService class and use that subclass instead, but this will probably not\nbe necessary. In addition to Carolina built-in services, there is a custom\nservice that you define, as well as the Services of\ntwo default plugins (Auth and Admin).")]),a("p",[t._v("The Carolina global object will read this configuration and keep a map of\nService names to require paths. The first time any given Service is needed,\nit is instantiated once, and all subsequent requests for the Service are\nanswered with the same object.")]),a("p",[a("strong",[t._v("Registering Arbitrary Values")])]),a("p",[t._v("On a topic slightly similar to Services, the Carolina global object has a\npropery call "),a("code",[t._v("values")]),t._v(", which is initialized as an empty object. You can\nput anything on it to retreive from anywhere else in the application.\nThere is the getter method "),a("code",[t._v("value(key, defaultValue)")]),t._v(" and the setter\nmethod "),a("code",[t._v("setValue(key, value)")]),t._v(".")]),a("p",[t._v("Example:")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Carolina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SOME_KEY"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SOME_VALUE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Later, in another part of the application:")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Carolina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SOME_KEY'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DEFAULT_VALUE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'SOME_VALUE'")]),t._v("\n")])])]),a("p",[t._v("It is a good idea to always provide a default when trying to access a value\nlike this. The default default is "),a("code",[t._v("null")]),t._v(".")]),a("h2",{attrs:{id:"accessing-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessing-services","aria-hidden":"true"}},[t._v("#")]),t._v(" Accessing Services")]),a("h3",{attrs:{id:"lazy-loading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lazy-loading","aria-hidden":"true"}},[t._v("#")]),t._v(" Lazy Loading")]),a("p",[t._v("As mentioned above, Services are only first initialized when they are needed.\nFor example, the first time some part of you application needs the DB Service,\nit is constructed for the first time. At this point all Fields and Model classes\nare loaded as well. The next time it is needed, the same DB Service is\navailable as it is for the rest of application lifecycle.")]),a("h3",{attrs:{id:"service-accessing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-accessing","aria-hidden":"true"}},[t._v("#")]),t._v(" Service Accessing")]),a("p",[t._v("Accessing a Service is easy. You pass its canonical name to the "),a("code",[t._v("$(serviceName)")]),t._v("\nmethod of the Carolina global object:")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" EventsSvc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Carolina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Events'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" DBSvc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Carolina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DB'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"the-baseservice-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-baseservice-class","aria-hidden":"true"}},[t._v("#")]),t._v(" The "),a("code",[t._v("BaseService")]),t._v(" Class")]),a("p",[t._v("All Services extend the "),a("code",[t._v("BaseService")]),t._v(" class, which is defined in\n"),a("code",[t._v("carolina/services/base-service.js")]),t._v(". It carries a few helper methods\nas well as the "),a("code",[t._v("onShutdown()")]),t._v(" async method which is called for every service\nwhen the application is shut down.")])])}],!1,null,null,null);e.default=n.exports}}]);